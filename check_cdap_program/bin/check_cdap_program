#!/usr/bin/env bash

# Copyright Â© 2015 Cask Data, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

function usage() {
  cat <<EOF

Nagios-style plugin to check status of CDAP Programs

Requirements:
  curl

Usage: $0 [-hvk] [-t timeout] -u <uri> [-n <namespace>] [T <token>]
         [-f <app.flow>[,<app.flow> ...]]
         [-m <app.mapreduce>[,<app.mapreduce> ...]]
         [-s <app.service>[,<app.service> ...]]
         [-S <app.spark>[,<app.spark> ...]]
         [-w <app.workflow>[,<app.workflow> ...]]
         [-W <app.worker>[,<app.worker> ...]]

Options:
  -h                    Usage info
  -u <uri>              CDAP Router endpoint to check. Defaults to the
                        environment variable CHECK_CDAP_URI, else empty.
  -n <namespace>        CDAP Namespace to query. Defaults to the environment
                        variable CHECK_CDAP_NAMESPACE, else 'default'.
  -f <app.flow>         CDAP target Flow to check. Each Flow must be prepended
                        with the Application name and delimited with a period.
                        Multiple Application.Flow pairs can be specified as a
                        comma-separated list. Defaults to the environment
                        variable CHECK_CDAP_FLOWS, else empty.
  -m <app.mapreduce>    CDAP target MapReduce to check. Each MapReduce must be
                        prepended with the Application name and delimited with
                        a period. Multiple Application.MapReduce pairs can be
                        specified as a comma-separated list. Defaults to the
                        environment variable CHECK_CDAP_MAPREDUCES,
                        else empty.
  -s <app.service>      CDAP target Service to check. Each Service must be
                        prepended with the Application name and delimited with
                        a period. Multiple Application.Service pairs can be
                        specified as a comma-separated list. Defaults to the
                        environment variable CHECK_CDAP_SERVICES, else
                        empty.
  -S <app.spark>        CDAP target Spark jobs to check. Each Spark job must be
                        prepended with the Application name and delimited with
                        a period. Multiple Application.Spark pairs can be
                        specified as a comma-separated list. Defaults to the
                        environment variable CHECK_CDAP_SPARKS, else
                        empty.
  -w <app.workflow>     CDAP target Workflow to check. Each Workflow must be
                        prepended with the Application name and delimited with
                        a period. Multiple Application.Workflow pairs can be
                        specified as a comma-separated list. Defaults to the
                        environment variable CHECK_CDAP_WORKFLOWS, else
                        empty.
  -W <app.worker>       CDAP target Workers to check. Each Worker must be
                        prepended with the Application name and delimited with
                        a period. Multiple Application.Worker pairs can be
                        specified as a comma-separated list. Defaults to the
                        environment variable CHECK_CDAP_WORKERS, else
                        empty.
  -t <timeout>          override default timeout (seconds). Defaults to the
                        environment variable CHECK_CDAP_TIMEOUT, else 30.
  -T <token>            CDAP Access Token. Defaults to the environment variable
                        CHECK_CDAP_TOKEN, else empty.
  -k                    Disable SSL certification validation
  -v                    verbose (debug) output


Examples:
  Check that a Flow and two Services are running in a specific namespace:
    $0 -u http://my.cdap.router.endpoint:10000 -n mynamespace -f MyApp.MyFlow \\
    -s MyApp.MyService1,MyApp.MyService2

  Check that a flow is running, using environment variables:
    CHECK_CDAP_URI=http://my.cdap.router.endpoint:10000 \\
    CHECK_CDAP_FLOWS=MyApp.MyFlow \\
    $0


EOF
}

# Option defaults
OPT_VERBOSE=''
CHECK_CDAP_URI=${CHECK_CDAP_URI}
CHECK_CDAP_NAMESPACE=${CHECK_CDAP_NAMESPACE:-default}
CHECK_CDAP_FLOWS=${CHECK_CDAP_FLOWS}
CHECK_CDAP_MAPREDUCES=${CHECK_CDAP_MAPREDUCES}
CHECK_CDAP_SERVICES=${CHECK_CDAP_SERVICES}
CHECK_CDAP_SPARKS=${CHECK_CDAP_SPARKS}
CHECK_CDAP_WORKFLOWS=${CHECK_CDAP_WORKFLOWS}
CHECK_CDAP_WORKERS=${CHECK_CDAP_WORKERS}
CHECK_CDAP_TIMEOUT=${CHECK_CDAP_TIMEOUT:-30}
CHECK_CDAP_TOKEN=${CHECK_CDAP_TOKEN}
OPT_SSL_INSECURE=''

API_VERSION='v3'

# Exit codes
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3

# Results
res_status=0
res_message=''

# Read in args
while getopts "hvku:f:m:s:S:w:W:t:T:" opt; do
  case $opt in
    h)
      usage
      exit ${OK}
      ;;
    v)
      OPT_VERBOSE=1
      ;;
    u)
      CHECK_CDAP_URI=${OPTARG}
      ;;
    f)
      CHECK_CDAP_FLOWS=${OPTARG}
      ;;
    m)
      CHECK_CDAP_MAPREDUCES=${OPTARG}
      ;;
    s)
      CHECK_CDAP_SERVICES=${OPTARG}
      ;;
    S)
      CHECK_CDAP_SPARKS=${OPTARG}
      ;;
    w)
      CHECK_CDAP_WORKFLOWS=${OPTARG}
      ;;
    W)
      CHECK_CDAP_WORKERS=${OPTARG}
      ;;
    t)
      CHECK_CDAP_TIMEOUT=${OPTARG}
      ;;
    T)
      CHECK_CDAP_TOKEN=${OPTARG}
      ;;
    k)
      OPT_SSL_INSECURE=1
      ;;
    \?)
      echo "Invalid option supplied" >&2
      usage
      exit ${WARNING}
      ;;
  esac
done

# Function definitions

# Validates a given program specification is in the format:
#   App.Prog[,App.Prog, ...]
#   Input:
#     Arg1: Program specification: (App.Prog)
#   Output:
#     none
function validate_program_options {
  local __opt_val=${1}
  local __prog_specs=''
  local __prog_spec=''
  local __appname=''
  local __progname=''
  IFS=',' read -ra __prog_specs <<< "${__opt_val}"
  for __prog_spec in "${__prog_specs[@]}"; do
    IFS='.' read __appname __progname <<< "${__prog_spec}"
    if [ -z ${__appname} ] || [ -z ${__progname} ] ; then
      echo "ERROR: Invalid program specification given: ${__opt_val}"
      usage
      exit ${CRITICAL}
    fi
  done
}

# Convenience wrapper functions for get_program_status
#   Input:
#     Arg1: A single CDAP program specification: app-id.program-id
function get_flow_status {
  get_program_status $1 'flows'
}
function get_mapreduce_status {
  get_program_status $1 'mapreduce'
}
function get_service_status {
  get_program_status $1 'services'
}
function get_spark_status {
  get_program_status $1 'spark'
}
function get_workflow_status {
  get_program_status $1 'workflows'
}
function get_worker_status {
  get_program_status $1 'workers'
}

# Get CDAP Program status
#   Input:
#     Arg1: A single CDAP program specification: app-id.program-id
#     Arg2: API program-type: (flows, mapreduce, services, etc)
#   Output:
#     __curr_resp: trimmed response string, ie 'RUNNING', 'STOPPED', etc
function get_program_status {
  IFS='.' read __appname __flowname <<< "${1}"
  local __progtype=${2}
  local __status_url="${CHECK_CDAP_URI}/${API_VERSION}/namespaces"\
"/${CHECK_CDAP_NAMESPACE}/apps/${__appname}/${__progtype}"\
"/${__flowname}/status"

  # Prep and execute a curl request
  cdap_curl_request ${__status_url}

  # Trim result to single status string
  __curr_resp=${__curr_resp%\"*}
  __curr_resp=${__curr_resp##*\"}
}

# Makes a curl request to CDAP API. Fails fast on any non-200 HTTP return code
#   Input:
#     Arg1: API endpoint url
#     ${OPT_VERBOSE}
#   Output:
#     ${__curr_resp}: response body, ie '{ "status":"RUNNING" }'
function cdap_curl_request {
  local __url=${1}

  # Build curl command
  local __curl_cmd="curl -s -m ${CHECK_CDAP_TIMEOUT} -w ' %{http_code}'"
  [[ ${OPT_VERBOSE} ]] && __curl_cmd+=' -v'
  [[ ${OPT_SSL_INSECURE} ]] && __curl_cmd+=' -k'
  if [ -n "${CHECK_CDAP_TOKEN}" ] ; then
    __curl_cmd+=" -H 'Authorization: Bearer"
    __curl_cmd+=" ${CHECK_CDAP_TOKEN}'"
  fi
  __curl_cmd+=" ${__url}"

  # Run curl command
  local __resp=$(eval ${__curl_cmd})
  local __exitcode=$?

  # Abort Unknown if failed curl execution
  if [[ ${__exitcode} -ne 0 ]] ; then
    echo "UNKNOWN: curl error with exit code ${__exitcode}, output: ${__resp}"
    exit ${UNKNOWN}
  fi

  # Handle per HTTP response code
  local __respcode=${__resp##* }
  case ${__respcode} in
    200)
      ;;
    401)
      if [ -n "${CHECK_CDAP_TOKEN}" ] ; then
        echo "UNKNOWN: Invalid CDAP Access Token: ${__resp}"
      else
        echo "UNKNOWN: CDAP Access Token required: ${__resp}"
      fi
      exit ${UNKNOWN}
      ;;
    404)
      echo "CRITICAL: CDAP Endpoint not found ${__respcode}: ${__url}"
      exit ${CRITICAL}
      ;;
    *)
      echo "UNKNOWN: unexpected HTTP response code ${__respcode}: ${__resp}"
      exit ${UNKNOWN}
      ;;
  esac

# "Return" body portion of response
__curr_resp=${__resp%% *}
}

# Records a single program status into the aggregate response
#   Input:
#     Arg1: A single CDAP program specification: app-id.program-id
#     Arg2: program status string, ie RUNNING, STOPPED, etc
#   Output:
#     ${res_message} update
#     ${res_status} update
function process_result {
  local __program=${1}
  local __status=${2}

  # Append to, or initialize, result message
  if [ -z "${res_message}" ] ; then
    res_message=${__program}=${__status}
  else
    res_message=${res_message},${__program}=${__status}
  fi

  # Set cumulative exit status
  if [[ ! ${__status} =~ RUNNING ]] ; then
    res_status=${CRITICAL}
  fi
}

# Begin main logic

# Validate args
if [ -z "${CHECK_CDAP_URI}" ] ; then
  echo "ERROR: -u <uri> is required"
  usage
  exit ${UNKNOWN}
fi

if [ -z ${CHECK_CDAP_FLOWS} ] && \
   [ -z ${CHECK_CDAP_MAPREDUCES} ] && \
   [ -z ${CHECK_CDAP_SERVICES} ] && \
   [ -z ${CHECK_CDAP_SPARKS} ] && \
   [ -z ${CHECK_CDAP_WORKFLOWS} ] && \
   [ -z ${CHECK_CDAP_WORKERS} ] ; then
  echo "ERROR: Nothing to check. Please provide -f, -m, -s, -S, -w, or -W flags"
  usage
  exit ${UNKNOWN}
fi

# Validate arguments to each of -f,-m,-s,-S,-w,-W are valid, comma-separated
#   program specifications
for __arg in ${CHECK_CDAP_FLOWS} ${CHECK_CDAP_MAPREDUCES} \
  ${CHECK_CDAP_SERVICES} ${CHECK_CDAP_SPARKS} \
  ${CHECK_CDAP_WORKFLOWS} ${CHECK_CDAP_WORKERS} ; do
  validate_program_options ${__arg}
done

# Confirm that curl is installed
if [[ ! $(which curl) ]] ; then
  echo "ERROR: curl must be installed and present in \$PATH"
  exit ${UNKNOWN}
fi

# Check specified flows
IFS=',' read -ra __flows <<< "${CHECK_CDAP_FLOWS}"
for __flow in "${__flows[@]}"; do
  get_flow_status ${__flow} && process_result ${__flow} ${__curr_resp}
done

# Check specified MapReduces
IFS=',' read -ra __mapreduces <<< "${CHECK_CDAP_MAPREDUCES}"
for __mr in "${__mapreduces[@]}"; do
  get_mapreduce_status ${__mr} && process_result ${__mr} ${__curr_resp}
done

# Check specified Services
IFS=',' read -ra __services <<< "${CHECK_CDAP_SERVICES}"
for __service in "${__services[@]}"; do
  get_service_status ${__service} && process_result ${__service} ${__curr_resp}
done

# Check specified Spark jobs
IFS=',' read -ra __sparks <<< "${CHECK_CDAP_SPARKS}"
for __spark in "${__sparks[@]}"; do
  get_spark_status ${__spark} && process_result ${__spark} ${__curr_resp}
done

# Check specified Workflows
IFS=',' read -ra __workflows <<< "${CHECK_CDAP_WORKFLOWS}"
for __wf in "${__workflows[@]}"; do
  get_workflow_status ${__wf} && process_result ${__wf} ${__curr_resp}
done

# Check specified Workers
IFS=',' read -ra __workers <<< "${CHECK_CDAP_WORKERS}"
for __worker in "${__workers[@]}"; do
  get_worker_status ${__worker} && process_result ${__worker} ${__curr_resp}
done

# Prepend result message with status string
case ${res_status} in
  0)
    res_message="OK: ${res_message}"
    ;;
  1)
    res_message="WARN: ${res_message}"
    ;;
  2)
    res_message="CRITICAL: ${res_message}"
    ;;
  *)
    res_message="UNKNOWN: ${res_message}"
    ;;
esac

# Display result to user and exit
echo ${res_message}
exit ${res_status}
